"""Tests for PR creator."""

from unittest.mock import MagicMock, patch

from collector_watcher.pr_creator import (
    PRCreator,
    generate_commit_message,
    generate_pr_body,
)


class TestGenerateCommitMessage:
    """Tests for generate_commit_message function."""

    def test_generate_commit_message_with_all_changes(self):
        """Test generating commit message with all change types."""
        added = ["receiver/foo", "processor/bar"]
        removed = ["exporter/baz"]
        updated = ["receiver/otlp", "processor/batch", "exporter/otlp"]

        message = generate_commit_message(added, removed, updated)

        assert "docs: Update OpenTelemetry Collector component pages" in message
        assert "Changes detected in latest scan:" in message
        assert "- Added: receiver/foo, processor/bar" in message
        assert "- Removed: exporter/baz" in message
        assert "- Updated: 3 component(s) with stability changes" in message
        assert "ðŸ¤– Generated by collector-watcher" in message

    def test_generate_commit_message_only_added(self):
        """Test generating commit message with only additions."""
        added = ["receiver/foo"]
        removed = []
        updated = []

        message = generate_commit_message(added, removed, updated)

        assert "- Added: receiver/foo" in message
        assert "- Removed:" not in message
        assert "- Updated:" not in message

    def test_generate_commit_message_only_removed(self):
        """Test generating commit message with only removals."""
        added = []
        removed = ["exporter/baz"]
        updated = []

        message = generate_commit_message(added, removed, updated)

        assert "- Added:" not in message
        assert "- Removed: exporter/baz" in message
        assert "- Updated:" not in message

    def test_generate_commit_message_only_updated(self):
        """Test generating commit message with only updates."""
        added = []
        removed = []
        updated = ["receiver/otlp", "processor/batch"]

        message = generate_commit_message(added, removed, updated)

        assert "- Added:" not in message
        assert "- Removed:" not in message
        assert "- Updated: 2 component(s) with stability changes" in message

    def test_generate_commit_message_no_changes(self):
        """Test generating commit message with no changes."""
        message = generate_commit_message([], [], [])

        assert "docs: Update OpenTelemetry Collector component pages" in message
        assert "ðŸ¤– Generated by collector-watcher" in message
        # Should not have the "Changes detected" section
        assert "Changes detected in latest scan:" not in message


class TestGeneratePRBody:
    """Tests for generate_pr_body function."""

    def test_generate_pr_body_with_all_changes(self):
        """Test generating PR body with all change types."""
        added = ["receiver/foo", "processor/bar"]
        removed = ["exporter/baz"]
        updated = ["receiver/otlp"]
        files = ["receiver.md", "processor.md", "exporter.md"]

        body = generate_pr_body(added, removed, updated, files)

        assert "## Automated Component Update" in body
        assert "- **Added**: 2 new component(s)" in body
        assert "- **Removed**: 1 component(s)" in body
        assert "- **Updated**: 1 component(s) with stability changes" in body

        # Check detailed changes
        assert "#### Added Components" in body
        assert "- **receiver/foo**" in body
        assert "- **processor/bar**" in body

        assert "#### Removed Components" in body
        assert "- **exporter/baz**" in body

        assert "#### Updated Components" in body
        assert "- **receiver/otlp**" in body

        # Check generated files
        assert "### Generated Files" in body
        assert "`content/en/docs/collector/components/receiver.md`" in body
        assert "`content/en/docs/collector/components/processor.md`" in body
        assert "`content/en/docs/collector/components/exporter.md`" in body

        # Check footer
        assert "ðŸ¤– Generated with [collector-watcher]" in body

    def test_generate_pr_body_no_changes(self):
        """Test generating PR body with no changes."""
        files = ["receiver.md"]

        body = generate_pr_body([], [], [], files)

        assert "## Automated Component Update" in body
        assert "- No component changes, refreshing documentation" in body
        assert "### Generated Files" in body

    def test_generate_pr_body_only_added(self):
        """Test generating PR body with only additions."""
        added = ["receiver/foo"]
        files = ["receiver.md"]

        body = generate_pr_body(added, [], [], files)

        assert "- **Added**: 1 new component(s)" in body
        assert "#### Added Components" in body
        assert "- **receiver/foo**" in body
        assert "#### Removed Components" not in body
        assert "#### Updated Components" not in body


class TestPRCreator:
    """Tests for PRCreator class."""

    @patch("collector_watcher.pr_creator.Github")
    def test_init(self, mock_github_class):
        """Test initializing PRCreator."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_user = MagicMock()
        mock_user.login = "testuser"
        mock_github.get_user.return_value = mock_user

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        creator = PRCreator(
            github_token="test_token",
            repo_owner="open-telemetry",
            repo_name="opentelemetry.io",
        )

        assert creator.repo_owner == "open-telemetry"
        assert creator.repo_name == "opentelemetry.io"
        assert creator.fork_owner == "testuser"
        assert creator.upstream_repo == mock_upstream
        assert creator.fork_repo == mock_fork

    @patch("collector_watcher.pr_creator.Github")
    def test_init_with_fork_owner(self, mock_github_class):
        """Test initializing PRCreator with explicit fork owner."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        creator = PRCreator(
            github_token="test_token",
            repo_owner="open-telemetry",
            repo_name="opentelemetry.io",
            fork_owner="jaydeluca",
        )

        assert creator.fork_owner == "jaydeluca"

    @patch("collector_watcher.pr_creator.Github")
    def test_create_feature_branch(self, mock_github_class):
        """Test creating a feature branch."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_user = MagicMock()
        mock_user.login = "testuser"
        mock_github.get_user.return_value = mock_user

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        creator = PRCreator(github_token="test_token")

        # Mock repo
        mock_repo = MagicMock()
        mock_head = MagicMock()
        mock_repo.heads = MagicMock()
        mock_repo.heads.__getitem__.return_value = mock_head
        mock_repo.heads.__contains__.return_value = False

        branch_name = creator.create_feature_branch(mock_repo, "test-branch")

        assert branch_name == "test-branch"
        mock_repo.create_head.assert_called_once_with("test-branch")
        mock_head.checkout.assert_called_once()

    @patch("collector_watcher.pr_creator.Github")
    def test_create_feature_branch_auto_name(self, mock_github_class):
        """Test creating a feature branch with auto-generated name."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_user = MagicMock()
        mock_user.login = "testuser"
        mock_github.get_user.return_value = mock_user

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        creator = PRCreator(github_token="test_token")

        mock_repo = MagicMock()
        mock_head = MagicMock()
        mock_repo.heads = MagicMock()
        mock_repo.heads.__getitem__.return_value = mock_head
        mock_repo.heads.__contains__.return_value = False

        branch_name = creator.create_feature_branch(mock_repo)

        # Should have format auto-update-components-YYYY-MM-DD
        assert branch_name.startswith("auto-update-components-")
        assert len(branch_name.split("-")) == 6  # auto, update, components, YYYY, MM, DD

    @patch("collector_watcher.pr_creator.Github")
    def test_commit_changes_no_changes(self, mock_github_class):
        """Test committing when there are no changes."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_user = MagicMock()
        mock_user.login = "testuser"
        mock_github.get_user.return_value = mock_user

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        creator = PRCreator(github_token="test_token")

        mock_repo = MagicMock()
        mock_repo.index.diff.return_value = []  # No changes

        result = creator.commit_changes(mock_repo, ["file.md"], "test commit")

        assert result is False
        mock_repo.index.commit.assert_not_called()

    @patch("collector_watcher.pr_creator.Github")
    def test_commit_changes_with_changes(self, mock_github_class):
        """Test committing when there are changes."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_user = MagicMock()
        mock_user.login = "testuser"
        mock_github.get_user.return_value = mock_user

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        creator = PRCreator(github_token="test_token")

        mock_repo = MagicMock()
        mock_repo.index.diff.return_value = ["some_diff"]  # Has changes

        result = creator.commit_changes(mock_repo, ["file.md"], "test commit")

        assert result is True
        mock_repo.index.add.assert_called_once_with(["file.md"])
        mock_repo.index.commit.assert_called_once_with("test commit")

    @patch("collector_watcher.pr_creator.Github")
    def test_create_pull_request_dry_run(self, mock_github_class):
        """Test creating PR in dry-run mode."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_user = MagicMock()
        mock_user.login = "testuser"
        mock_github.get_user.return_value = mock_user

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        creator = PRCreator(github_token="test_token")

        result = creator.create_pull_request(
            title="Test PR",
            body="Test body",
            head_branch="test-branch",
            base_branch="main",
            dry_run=True,
        )

        assert result is not None
        assert result["number"] is None
        assert result["url"] == "DRY_RUN"
        assert result["title"] == "Test PR"
        assert result["head"] == "testuser:test-branch"
        assert result["base"] == "main"

        # Should not actually create PR
        mock_upstream.create_pull.assert_not_called()

    @patch("collector_watcher.pr_creator.Github")
    def test_create_pull_request_success(self, mock_github_class):
        """Test creating PR successfully."""
        mock_github = MagicMock()
        mock_github_class.return_value = mock_github

        mock_user = MagicMock()
        mock_user.login = "testuser"
        mock_github.get_user.return_value = mock_user

        mock_upstream = MagicMock()
        mock_fork = MagicMock()
        mock_github.get_repo.side_effect = [mock_upstream, mock_fork]

        # Mock existing PRs (empty)
        mock_upstream.get_pulls.return_value = []

        # Mock created PR
        mock_pr = MagicMock()
        mock_pr.number = 123
        mock_pr.html_url = "https://github.com/open-telemetry/opentelemetry.io/pull/123"
        mock_upstream.create_pull.return_value = mock_pr

        creator = PRCreator(github_token="test_token")

        result = creator.create_pull_request(
            title="Test PR",
            body="Test body",
            head_branch="test-branch",
            base_branch="main",
            dry_run=False,
        )

        assert result is not None
        assert result["number"] == 123
        assert result["url"] == "https://github.com/open-telemetry/opentelemetry.io/pull/123"
        assert result["title"] == "Test PR"

        mock_upstream.create_pull.assert_called_once_with(
            title="Test PR",
            body="Test body",
            head="testuser:test-branch",
            base="main",
        )
